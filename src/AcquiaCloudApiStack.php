<?php

/**
 * @file
 * The Acquia Cloud API Robo task, originally generated by the Robo task
 * generator.
 */

namespace Robo\Task;

use AcquiaCloudApi\Response\BackupsResponse;
use AcquiaCloudApi\Response\EnvironmentResponse;
use AcquiaCloudApi\Response\OperationResponse;
use Robo\Result;
use Robo\State\StateAwareInterface;
use Robo\State\StateAwareTrait;
use AcquiaCloudApi\CloudApi\Connector;
use AcquiaCloudApi\CloudApi\Client;
use Lullabot\RoboAcquia\AcquiaTaskWatcher;

/**
 * Wrapper for Client Component.
 * Comands are executed in stack and can be stopped on first fail with `stopOnFail` option.
 *
 * ``` php
 * <?php
 * $this->taskAcquiaCloudApi()
 *      ...
 *      ->run();
 *
 * // one line
 * ...
 *
 * ?>
 * ```
 *
 * @method factory($connector)
 * @method applications()
 * @method application($applicationUuid)
 * @method renameApplication($applicationUuid, $name)
 * @method code($applicationUuid)
 * @method databases($applicationUuid)
 * @method environmentDatabases($environmentUuid)
 * @method databaseCopy($environmentFromUuid, $dbName, $environmentToUuid)
 * @method databaseCreate($applicationUuid, $name)
 * @method databaseDelete($applicationUuid, $name)
 * @method createDatabaseBackup($environmentUuid, $dbName)
 * @method databaseBackups($environmentUuid, $dbName)
 * @method databaseBackup($environmentUuid, $dbName, $backupId)
 * @method restoreDatabaseBackup($environmentUuid, $dbName, $backupId)
 * @method copyFiles($environmentUuidFrom, $environmentUuidTo)
 * @method switchCode($environmentUuid, $branch)
 * @method deployCode($environmentFromUuid, $environmentToUuid, $commitMessage = NULL)
 * @method domains($environmentUuid)
 * @method createDomain($environmentUuid, $hostname)
 * @method deleteDomain($environmentUuid, $domain)
 * @method purgeVarnishCache($environmentUuid, $domains)
 * @method tasks($applicationUuid)
 * @method environments($applicationUuid)
 * @method environment($environmentUuid)
 * @method renameEnvironment($environmentUuid, $label)
 * @method servers($environmentUuid)
 * @method enableLiveDev($environmentUuid)
 * @method disableLiveDev($environmentUuid)
 * @method enableProductionMode($environmentUuid)
 * @method disableProductionMode($environmentUuid)
 * @method crons($environmentUuid)
 * @method cron($environmentUuid, $cronId)
 * @method createCron($environmentUuid, $command, $frequency, $label)
 * @method deleteCron($environmentUuid, $cronId)
 * @method disableCron($environmentUuid, $cronId)
 * @method enableCron($environmentUuid, $cronId)
 * @method drushAliases()
 * @method applicationInsights($applicationUuid)
 * @method environmentInsights($environmentUuid)
 * @method organizations()
 * @method organizationApplications($organizationUuid)
 * @method organizationRoles($organizationUuid)
 * @method updateRole($roleUuid, $permissions)
 * @method createRole($organizationUuid, $name, $permissions, $description = NULL)
 * @method deleteRole($roleUuid)
 * @method organizationTeams($organizationUuid)
 * @method teams()
 * @method renameTeam($teamUuid, $name)
 * @method createTeam($organizationUuid, $name)
 * @method deleteTeam($teamUuid)
 * @method addApplicationToTeam($teamUuid, $applicationUuid)
 * @method createTeamInvite($teamUuid, $email, $roles)
 * @method createOrganizationAdminInvite($organizationUuid, $email)
 * @method teamApplications($teamUuid)
 * @method members($organizationUuid)
 * @method invitees($organizationUuid)
 * @method deleteMember($organizationUuid, $memberUuid)
 * @method permissions()
 */
class AcquiaCloudApiStack extends StackBasedTask implements StateAwareInterface
{
    use StateAwareTrait;

    protected $delegate;
    protected $connector;

    /**
     * A task watcher to wait for tasks to complete.
     *
     * @var \Lullabot\RoboAcquia\AcquiaTaskWatcher
     */
    protected $taskWatcher;

    /**
     * Constructor.
     *
     * @param iterable $config
     *   Config for connecting to the Acquia Cloud API.
     */
    public function __construct(iterable $config = [])
    {
        $this->connector = new Connector($config);
        $this->delegate = new Client($this->connector);
    }

    protected function getDelegate()
    {
        return $this->delegate;
    }

    public function getQuery()
    {
        return $this->delegate->getQuery();
    }

    /**
     * Clear query.
     */
    public function clearQuery()
    {
        $this->delegate->clearQuery();
        return $this;
    }

    /**
     * Add a query parameter to filter results.
     *
     * @param string $name
     * @param string $value
     */
    public function addQuery($name, $value)
    {
        $this->delegate->addQuery($name, $value);
        return $this;
    }

    /**
     * Wait for the Acquia tasks to complete.
     *
     * @param string $applicationUuid
     *   The Acquia application UUID to check for tasks on.
     * @param string $name
     *   The name of the task to wait for completion.
     * @param callable $callback
     *   An optional callback to provide feedback during the watch loop.
     * @param int $timeout
     *   The timeout in seconds to wait. Defaults to 120 (2 minutes).
     *
     * @return $this
     */
    public function waitForTaskCompletion($applicationUuid, $name, callable $callback = null, $timeout = 120)
    {
        if (!empty($this->taskWatcher)) {
            throw new \Exception('An Acquia task watcher has already been instantiated for this Robo stack.');
        }
        $this->taskWatcher = new AcquiaTaskWatcher($this->delegate, $applicationUuid, $name, $callback, $timeout);
        return $this;
    }

    protected function _deployCode($environmentFromUuid, $environmentToUuid, $commitMessage = null)
    {
        $this->delegate->deployCode($environmentFromUuid, $environmentToUuid, $commitMessage);
    }

    protected function _createRole($organizationUuid, $name, $permissions, $description = null)
    {
        $this->delegate->createRole($organizationUuid, $name, $permissions, $description);
    }

    /**
     * {@inheritdoc}
     */
    public function run()
    {
        $result = parent::run();
        if ($this->taskWatcher) {
            $this->taskWatcher->watch();
        }
        return $result;
    }

    /**
     * {@inheritdoc}
     */
    protected function processResult($function_result)
    {
        if ($function_result instanceof \ArrayObject) {
            $data['result'] = $function_result;
            return Result::success($this, '', $data);
        }
        if ($function_result instanceof OperationResponse) {
            /* @var \AcquiaCloudApi\Response\OperationResponse $function_result */
            return Result::success($this, $function_result->message);
        }
        if ($function_result instanceof EnvironmentResponse) {
            return Result::success($this, '', $function_result);
        }
        if ($function_result instanceof BackupsResponse) {
            return Result::success($this, '', $function_result);
        }
        if (!$function_result) {
            return Result::error($this, 'Acquia returned an empty or falsey response.');
        }
        return Result::error($this, 'Unable to detect the type of response in processResult().', $function_result);
    }
}
