<?php

/**
 * @file
 * The Acquia Cloud API Robo task, originally generated by the Robo task
 * generator.
 */

namespace Lullabot\RoboAcquia;

use AcquiaCloudApi\Response\BackupsResponse;
use AcquiaCloudApi\Response\EnvironmentResponse;
use AcquiaCloudApi\Response\OperationResponse;
use Robo\Result;
use Robo\State\StateAwareInterface;
use Robo\State\StateAwareTrait;
use AcquiaCloudApi\Connector\Connector;
use AcquiaCloudApi\Connector\Client;
use Lullabot\RoboAcquia\AcquiaClient;
use Robo\Task\StackBasedTask;

/**
 * Wrapper for Client Component.
 * Comands are executed in stack and can be stopped on first fail with
 * `stopOnFail` option.
 *
 * ``` php
 * <?php
 * $this->taskAcquiaCloudApi()
 *      ...
 *      ->run();
 *
 * // one line
 * ...
 *
 * ?>
 * ```
 *
 * @method $this factory($connector)
 * @method $this applications()
 * @method $this application($applicationUuid)
 * @method $this renameApplication($applicationUuid, $name)
 * @method $this code($applicationUuid)
 * @method $this databases($applicationUuid)
 * @method $this environmentDatabases($environmentUuid)
 * @method $this databaseCopy($environmentFromUuid, $dbName, $environmentToUuid)
 * @method $this databaseCreate($applicationUuid, $name)
 * @method $this databaseDelete($applicationUuid, $name)
 * @method $this createDatabaseBackup($environmentUuid, $dbName)
 * @method $this databaseBackups($environmentUuid, $dbName)
 * @method $this databaseBackup($environmentUuid, $dbName, $backupId)
 * @method $this restoreDatabaseBackup($environmentUuid, $dbName, $backupId)
 * @method $this copyFiles($environmentUuidFrom, $environmentUuidTo)
 * @method $this switchCode($environmentUuid, $branch)
 * @method $this deployCode($environmentFromUuid, $environmentToUuid, $commitMessage = NULL)
 * @method $this domains($environmentUuid)
 * @method $this createDomain($environmentUuid, $hostname)
 * @method $this deleteDomain($environmentUuid, $domain)
 * @method $this purgeVarnishCache($environmentUuid, $domains)
 * @method $this tasks($applicationUuid)
 * @method $this environments($applicationUuid)
 * @method $this environment($environmentUuid)
 * @method $this renameEnvironment($environmentUuid, $label)
 * @method $this servers($environmentUuid)
 * @method $this enableLiveDev($environmentUuid)
 * @method $this disableLiveDev($environmentUuid)
 * @method $this enableProductionMode($environmentUuid)
 * @method $this disableProductionMode($environmentUuid)
 * @method $this crons($environmentUuid)
 * @method $this cron($environmentUuid, $cronId)
 * @method $this createCron($environmentUuid, $command, $frequency, $label)
 * @method $this deleteCron($environmentUuid, $cronId)
 * @method $this disableCron($environmentUuid, $cronId)
 * @method $this enableCron($environmentUuid, $cronId)
 * @method $this drushAliases()
 * @method $this applicationInsights($applicationUuid)
 * @method $this environmentInsights($environmentUuid)
 * @method $this organizations()
 * @method $this organizationApplications($organizationUuid)
 * @method $this organizationRoles($organizationUuid)
 * @method $this updateRole($roleUuid, $permissions)
 * @method $this createRole($organizationUuid, $name, $permissions, $description = NULL)
 * @method $this deleteRole($roleUuid)
 * @method $this organizationTeams($organizationUuid)
 * @method $this teams()
 * @method $this renameTeam($teamUuid, $name)
 * @method $this createTeam($organizationUuid, $name)
 * @method $this deleteTeam($teamUuid)
 * @method $this addApplicationToTeam($teamUuid, $applicationUuid)
 * @method $this createTeamInvite($teamUuid, $email, $roles)
 * @method $this createOrganizationAdminInvite($organizationUuid, $email)
 * @method $this teamApplications($teamUuid)
 * @method $this members($organizationUuid)
 * @method $this invitees($organizationUuid)
 * @method $this deleteMember($organizationUuid, $memberUuid)
 * @method $this permissions()
 */
class AcquiaCloudApiStack extends StackBasedTask implements StateAwareInterface
{
    use StateAwareTrait;

    protected $delegate;
    protected $connector;

    /**
     * Constructor.
     *
     * @param iterable $config
     *   Config for connecting to the Acquia Cloud API.
     */
    public function __construct(iterable $config = [])
    {
        $this->connector = new Connector($config);
        $this->delegate = new AcquiaClient($this->connector);
    }

    protected function getDelegate()
    {
        return $this->delegate;
    }

    public function getQuery()
    {
        return $this->delegate->getQuery();
    }

    /**
     * Clear query.
     *
     * @return $this
     */
    public function clearQuery()
    {
        $this->delegate->clearQuery();
        return $this;
    }

    /**
     * Add a query parameter to filter results.
     *
     * @param string $name
     * @param string $value
     *
     * @return $this
     */
    public function addQuery($name, $value)
    {
        $this->delegate->addQuery($name, $value);
        return $this;
    }

    /**
     * Wait for the Acquia tasks to complete.
     *
     * @param string   $applicationUuid
     *   The Acquia application UUID to check for tasks on.
     * @param string   $name
     *   The name of the task to wait for completion.
     * @param int      $timeout
     *   The timeout in seconds to wait. Defaults to 120 (2 minutes).
     * @param callable $callback
     *   An optional callback to provide feedback during the watch loop.
     *
     * @return $this
     */
    public function waitForTaskCompletion($applicationUuid, $name, $timeout = 120, callable $callback = null)
    {
        $task_watcher = new AcquiaTaskWatcher($this->delegate, $applicationUuid);
        $this->addToCommandStack([$task_watcher, 'watch'], [$name, $timeout, $callback]);
        return $this;
    }

    protected function _deployCode($environmentFromUuid, $environmentToUuid, $commitMessage = null)
    {
        $this->delegate->deployCode($environmentFromUuid, $environmentToUuid, $commitMessage);
    }

    protected function _createRole($organizationUuid, $name, $permissions, $description = null)
    {
        $this->delegate->createRole($organizationUuid, $name, $permissions, $description);
    }

    /**
     * {@inheritdoc}
     */
    protected function processResult($function_result)
    {
        if ($function_result instanceof \ArrayObject) {
            $data['result'] = $function_result;
            return Result::success($this, '', $data);
        }
        if ($function_result instanceof OperationResponse) {
            /* @var \AcquiaCloudApi\Response\OperationResponse $function_result */
            return Result::success($this, $function_result->message);
        }
        if ($function_result instanceof EnvironmentResponse) {
            return Result::success($this, '', $function_result);
        }
        if ($function_result instanceof BackupsResponse) {
            return Result::success($this, '', $function_result);
        }
        if (!$function_result) {
            return Result::error($this, 'Acquia returned an empty or falsey response.');
        }
        return Result::error($this, 'Unable to detect the type of response in processResult().', $function_result);
    }
}
